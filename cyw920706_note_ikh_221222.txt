 
전송 사용량에 대한 버퍼 풀을 만듭니다. 

크기가 264바이트를 초과하는 패킷을 전송해야 하는 경우 애플리케이션은 버퍼 풀을 생성해야 합니다. 

애플리케이션은 하중 길이를 버퍼 크기로 지정해야 한다. 

전송은 전송 헤더 요구 사항과 애플리케이션 지정 페이로드 크기를 고려하여 원하는 크기의 풀을 생성하는 작업을 담당합니다. 

생성된 풀 메모리를 해제하거나 해제할 수 없습니다.
could set config parameter to 

to enable interrupts for all edges, with a pull down,

configures

For example, to enable interrupts for all edges, with a pull-down, you could set config parameter to:

configures HCI traces to be routed to the WICED HCI interface
예를 들어 풀다운을 사용하여 모든 에지에 대해 인터럽트를 활성화하려면 구성 매개 변수를 다음과 같이 설정할 수 있습니다.

HCI 트레이스가 WICEED HCI 인터페이스로 라우팅되도록 구성합니다.

Note that this is independent of configuring the pin for interrupts; a call to configurePin() is also required (this call should be made before invoking this function)  .


Also note that once registered, you CANNOT UNREGISTER;

registration is meant to be a startup activity. 

To stop receiving notifications, re-configure the pin and disable the interrupt using configurePin().
이것은 인터럽트용 핀을 구성하는 것과는 무관하며, 핀()을 구성하기 위한 호출도 필요합니다(이 호출은 이 함수를 호출하기 전에 이루어져야 합니다).


또한 일단 등록되면 등록을 취소할 수 없습니다.

등록은 시작 활동을 의미합니다. 

알림 수신을 중지하려면 핀을 다시 구성하고 configurePin()을 사용하여 인터럽트를 비활성화하십시오.

---

 

888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
*/
////////////////////////////////////////////////////////////////////////////////////////////////
 






/** Change in power management status  (used by BTM_POWER_MANAGEMENT_STATUS_EVT notication) */
typedef struct {
    uint8_t                             *bd_addr;       /**< BD Address of remote */
    wiced_bt_dev_power_mgmt_status_t    status;         /**< PM status */
    uint16_t                            value;          /**< Additional mode data */
    uint8_t                             hci_status;     /**< HCI status */
} wiced_bt_power_mgmt_notification_t;

typedef union
{
wiced_bt_power_mgmt_notification_t  power_mgmt_notification;            /**< Data for BTM_POWER_MANAGEMENT_STATUS_EVT */
}wiced_bt_management_evt_data_t

p_power_mgmt_notification = &p_event_data->power_mgmt_notification;
21. BTM_POWER_MANAGEMENT_STATUS_EVT
BTM_파워_매니지먼트_스태터스_이벤트
p_power_mgmt_notification = &p_event_data-> 

포인터로 > 
p_power_mgmt_notification = &p_event_data->power_mgmt_notifcation;

-----------------
//extern BOOL32 wiced_hal_puart_select_uart_pads(UINT8 rxdPin, UINT8 txdPin, UINT8 ctsPin, UINT8 rtsPin);

#ifdef CYW20706A2
    wiced_hal_puart_init();
	WICED_BT_TRACE("*************sdsdsdsdDefined CYW20706A2, Starting wiced_hal_puart_init()!!*************\n");  
  #if PUART_RTS_CTS_FLOW
    // special setup to enable flow control pins
    WICED_BT_TRACE("*************PUART_RTS_CTS_FLOW???*************\n");
    platform_puart_flow_control_pin_init();
  #endif
  
    #if PUART_RTS_CTS_FLOW
    // special setup to enable flow control pins
    platform_puart_flow_control_pin_init() : 흐름 제어 핀을 활성화하기 위한 특수 설정
	
	if(!wiced_hal_puart_select_uart_pads( WICED_PUART_RXD, WICED_PUART_TXD, WICED_PUART_CTS, WICED_PUART_RTS))
    {
        WICED_BT_TRACE("wiced_hal_puart_select_uart_pads failed!!\n");
    }
	


gpio_test_led():
 ㄴwiced_init_timer( &seconds_timer, &seconds_app_timer_cb, 0, WICED_SECONDS_PERIODIC_TIMER )
 ㄴwiced_start_timer( &seconds_timer, APP_TIMEOUT_IN_SECONDS_B ) : 타이머를 시작하기 전에 타이머를 초기화해야 합니다. 
                                                                타이머를 실행하면 칩의 저전력 모드를 방해합니다. 

                                                                저전력 모드를 유지하는 시간은 실행 중인 타이머의 시간 초과 값에 따라 달라집니다. 
                                                                즉, 절전 시간은 활성 타이머 중 다음 타이머가 만료되는 시간에 따라 달라집니다.


seconds_app_timer_cb()
ㄴwiced_hal_gpio_set_pin_output() : Sets the output value of a pin. 








====
wiced_platform_register_button_callback
wiced_hal_gpio_register_pin_for_interrupt

#ifdef HCI_TRACE_OVER_TRANSPORT

1. app_trace_callback() : 프로토콜 추적 전달


2. app_tx_ack_timeout() : 대량의 데이터를 전송하는 동안 app_tx_ack_timeout()가 주기적으로 호출됩니다.
ㄴapp_send_data();


3. app_interrupt_handler() : 데이터 전송을 시작하는 함수를 테스트합니다.
ㄴapp_send_data();

4. wiced_hal_gpio_get_pin_interrupt_status() : Get the interrupt status of a pin



5. app_read_nvram() : NVRAM에서 데이터를 읽고, 전달된 버퍼를 반환합니다
ㄴwiced_hal_read_nvram() : NVRAM으로부터 데이터를 읽는다 

6. app_write_nvram() : NVRAM에 정보를 저장하기 위해 NVRAM 쓰기 기능이 호출됩니다.

7. spp_bt_remote_name_callback() : *

8. spp_rx_data_callback : EA 세션을 통해 수신된 프로세스 데이터.  
호스트에 전달할 버퍼를 할당할 수 있으면 TRUE를 반환합니다.



spp_connection_up_callback
spp_connection_down_callback
app_timeout


app_write_eir() : 확장 조회 응답 데이터를 준비합니다. 현재 버전은 장치 이름 및 16비트 SPP 서비스를 게시합니다.
ㄴ wiced_bt_get_buffer_count공용 풀에서 버퍼를 할당합니다. 공용 풀은 애플리케이션의 wiceed_bt_cfg_buf_pool_t를 사용하여 지정해야 합니다.
ㄴ wiced_bt_dev_write_eir : Write EIR data to controller.

application_init() : 블루투스 스택 초기화가 완료된 후 SPP 애플리케이션 초기화가 실행됩니다.
ㄴ wiced_bt_app_init : /* Initialize wiced app */
ㄴ rtc_init(); :  /* Initialize the RTC block */
ㄴ
/* Initializes the GPIO driver */
wiced_bt_app_hal_init();
wiced_hal_gpio_configure_pin(WICED_GPIO_BUTTON, WICED_GPIO_BUTTON_SETTINGS( GPIO_EN_INT_RISING_EDGE ), WICED_GPIO_BUTTON_DEFAULT_STATE );
wiced_hal_gpio_register_pin_for_interrupt(WICED_GPIO_BUTTON, app_interrupt_handler, NULL);

*13. APPLICATION_START()


14. wiced_bt_rfcomm_init() : Initialize RFCOMM. 애플리케이션 버퍼 풀을 사용하지 않을 것이며 wiceed_bt_cfg.c에 구성된 스택 풀을 사용할 것입니다.
ㄴwiced_bt_rfcomm_init : 이 함수는 RFCOMM에서 사용할 개인 풀을 할당합니다.



/** Change in power management status  (used by BTM_POWER_MANAGEMENT_STATUS_EVT notication) */
typedef struct {
    uint8_t                             *bd_addr;       /**< BD Address of remote */
    wiced_bt_dev_power_mgmt_status_t    status;         /**< PM status */
    uint16_t                            value;          /**< Additional mode data */
    uint8_t                             hci_status;     /**< HCI status */
} wiced_bt_power_mgmt_notification_t;

typedef union
{
wiced_bt_power_mgmt_notification_t  power_mgmt_notification;            /**< Data for BTM_POWER_MANAGEMENT_STATUS_EVT */
}wiced_bt_management_evt_data_t

p_power_mgmt_notification = &p_event_data->power_mgmt_notification;
21. BTM_POWER_MANAGEMENT_STATUS_EVT
BTM_파워_매니지먼트_스태터스_이벤트
p_power_mgmt_notification = &p_event_data-> 

포인터로 > 
p_power_mgmt_notification = &p_event_data->power_mgmt_notifcation;




  

시연된 기능
- SPP 라이브러리 사용
 
참고: 이 스니펫 앱은 WICEED HCI 제어를 지원하지 않으며 추적에만 전송을 사용할 수 있습니다.

WICE HCIUART에 추적 경로를 지정하면 
아래 wiceed_transport_cfg_t 구조에 설정된 것과 동일한 보드 속도로 ClientControl 앱을 사용합니다. 

(현재 HCI_UART_DEFAULT_BAUD로 설정되어 있으며, 사용되는 보드의 기능에 따라 3Mbps 또는 115200입니다.)



피어 장치에 대한 직렬 포트 연결을 설정하거나 RFCOMM이 피어 장치의 연결을 수락하도록 허용합니다.


서버가 여러 개의 동시 연결을 허용할 준비가 된 경우 서버는 동일한 scn 매개 변수를 사용하여 이 함수를 여러 번 호출할 수 있습니다.

클라이언트가 기존의 none 이니시에이터 멀티플렉서 채널에서 연결을 시작하는 경우 연결의 DLCI는 (scn * 2 + 1)입니다.  

그렇지 않으면 (scn * 2)입니다. 
서버의 경우 클라이언트가 (scn * 2 + 1) dlci를 사용하여 호출할 경우 나중에 DLCI를 변경할 수 있습니다.



